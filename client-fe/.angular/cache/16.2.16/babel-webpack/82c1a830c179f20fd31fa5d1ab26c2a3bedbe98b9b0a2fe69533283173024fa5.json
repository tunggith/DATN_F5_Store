{"ast":null,"code":"import { JwtHelperService } from \"@auth0/angular-jwt\";\nimport { BehaviorSubject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthenticationService {\n  updateIsLoggedInSubj(value) {\n    this.isLoggedInSubj.next(value);\n  }\n  updateLoggedCust(newCust) {\n    this.loggedCust.next(newCust);\n  }\n  // constructor, ngOn\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = \"http://localhost:8080/auth\";\n    this.jwtHelper = new JwtHelperService();\n    this.isLoggedInSubj = new BehaviorSubject(false);\n    this.loggedCust = new BehaviorSubject(null);\n  }\n  // 1\n  login(loginReq) {\n    return this.http.post(`${this.apiUrl}/client/login`, loginReq, {\n      observe: \"response\"\n    });\n  }\n  // 2\n  logout() {\n    this.token = null;\n    // this.loggedInUsername = null;\n    localStorage.removeItem(\"customer\");\n    localStorage.removeItem(\"token\");\n    this.router.navigate([\"/login\"]);\n  }\n  // 3\n  saveTokenToStorage(token) {\n    this.token = token;\n    localStorage.setItem(\"token\", token);\n  }\n  // 4\n  saveCustomerToStorage(customer) {\n    localStorage.setItem(\"customer\", JSON.stringify(customer));\n  }\n  // 5\n  getCustomerFromStorage() {\n    return JSON.parse(localStorage.getItem(\"customer\"));\n  }\n  // 6\n  getTokenFromStorage() {\n    return this.token;\n  }\n  // 7\n  loadTokenFromStorage() {\n    this.token = localStorage.getItem(\"token\");\n  }\n  // 8\n  /*\n  - loggedIn = true khi decode token được subject(username) not empty và token chưa hết hạn\n  - token chưa hết hạn đồng nghĩa rằng token đó được decode và not empty\n  */\n  isLoggedIn() {\n    this.loadTokenFromStorage();\n    if (this.token != null && this.token != \"\") {\n      let subject = this.jwtHelper.decodeToken(this.token).sub;\n      if (subject != null && this.token != \"\") {\n        if (!this.jwtHelper.isTokenExpired(this.token)) {\n          // this.loggedInUsername = subject;\n          return true;\n        }\n        return false;\n      }\n      return false;\n    } else {\n      return false;\n    }\n  }\n  // 9\n  signUp(req) {\n    return this.http.post(`${this.apiUrl}/sign-up`, req);\n  }\n  // 10\n  checkEmailForForgetPassword(email) {\n    return this.http.get(`${this.apiUrl}/send-verify-code/${email}`);\n  }\n  // 11\n  changePasswordNoneLogged(req) {\n    return this.http.post(`${this.apiUrl}/change-pwd-none-log`, req);\n  }\n  // 12\n  changePassword(req) {\n    return this.http.post(`${this.apiUrl}/change-pwd-log`, req);\n  }\n  static #_ = this.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"names":["JwtHelperService","BehaviorSubject","AuthenticationService","updateIsLoggedInSubj","value","isLoggedInSubj","next","updateLoggedCust","newCust","loggedCust","constructor","http","router","apiUrl","jwtHelper","login","loginReq","post","observe","logout","token","localStorage","removeItem","navigate","saveTokenToStorage","setItem","saveCustomerToStorage","customer","JSON","stringify","getCustomerFromStorage","parse","getItem","getTokenFromStorage","loadTokenFromStorage","isLoggedIn","subject","decodeToken","sub","isTokenExpired","signUp","req","checkEmailForForgetPassword","email","get","changePasswordNoneLogged","changePassword","_","i0","ɵɵinject","i1","HttpClient","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["E:\\Du_An_Tot_Nghiep\\DATN_F5_Store\\client-fe\\src\\app\\service\\authentication.service.ts"],"sourcesContent":["import { HttpClient, HttpResponse } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { JwtHelperService } from \"@auth0/angular-jwt\";\r\nimport { BehaviorSubject, Observable } from \"rxjs\";\r\n\r\nimport { LoginRequest } from \"../model/interface/login-request.interface\";\r\nimport { Customer } from \"../model/class/customer.class\";\r\nimport { SignUpReq } from \"../model/interface/sign-up-req.interface\";\r\nimport { ChangePwdReq2 } from \"../model/interface/change-pwd-req2.interface\";\r\nimport { ChangePwdReq } from \"../model/interface/change-pwd-req.interface\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class AuthenticationService {\r\n  public readonly apiUrl = \"http://localhost:8080/auth\";\r\n\r\n  private token: string;\r\n  private jwtHelper = new JwtHelperService();\r\n  public isLoggedInSubj = new BehaviorSubject<boolean>(false);\r\n  public loggedCust = new BehaviorSubject<Customer>(null);\r\n\r\n  public updateIsLoggedInSubj(value: boolean): void {\r\n    this.isLoggedInSubj.next(value);\r\n  }\r\n\r\n  public updateLoggedCust(newCust: Customer): void {\r\n    this.loggedCust.next(newCust);\r\n  }\r\n\r\n  // constructor, ngOn\r\n  constructor(private http: HttpClient, private router: Router) {}\r\n\r\n  // 1\r\n  public login(loginReq: LoginRequest): Observable<HttpResponse<Customer>> {\r\n    return this.http.post<Customer>(`${this.apiUrl}/client/login`, loginReq, {\r\n      observe: \"response\",\r\n    });\r\n  }\r\n\r\n  // 2\r\n  public logout(): void {\r\n    this.token = null;\r\n    // this.loggedInUsername = null;\r\n    localStorage.removeItem(\"customer\");\r\n    localStorage.removeItem(\"token\");\r\n    this.router.navigate([\"/login\"]);\r\n  }\r\n\r\n  // 3\r\n  public saveTokenToStorage(token: string): void {\r\n    this.token = token;\r\n    localStorage.setItem(\"token\", token);\r\n  }\r\n\r\n  // 4\r\n  public saveCustomerToStorage(customer: Customer): void {\r\n    localStorage.setItem(\"customer\", JSON.stringify(customer));\r\n  }\r\n\r\n  // 5\r\n  public getCustomerFromStorage(): Customer {\r\n    return JSON.parse(localStorage.getItem(\"customer\"));\r\n  }\r\n\r\n  // 6\r\n  public getTokenFromStorage(): string {\r\n    return this.token;\r\n  }\r\n\r\n  // 7\r\n  public loadTokenFromStorage(): void {\r\n    this.token = localStorage.getItem(\"token\");\r\n  }\r\n\r\n  // 8\r\n  /*\r\n  - loggedIn = true khi decode token được subject(username) not empty và token chưa hết hạn\r\n  - token chưa hết hạn đồng nghĩa rằng token đó được decode và not empty\r\n  */\r\n  public isLoggedIn(): boolean {\r\n    this.loadTokenFromStorage();\r\n    if (this.token != null && this.token != \"\") {\r\n      let subject = this.jwtHelper.decodeToken(this.token).sub;\r\n      if (subject != null && this.token != \"\") {\r\n        if (!this.jwtHelper.isTokenExpired(this.token)) {\r\n          // this.loggedInUsername = subject;\r\n          return true;\r\n        }\r\n        return false;\r\n      }\r\n      return false;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // 9\r\n  public signUp(req: SignUpReq): Observable<Customer> {\r\n    return this.http.post<Customer>(`${this.apiUrl}/sign-up`, req);\r\n  }\r\n\r\n  // 10\r\n  public checkEmailForForgetPassword(email: string): Observable<any> {\r\n    return this.http.get<any>(`${this.apiUrl}/send-verify-code/${email}`);\r\n  }\r\n\r\n  // 11\r\n  public changePasswordNoneLogged(req: ChangePwdReq2): Observable<any> {\r\n    return this.http.post<any>(`${this.apiUrl}/change-pwd-none-log`, req);\r\n  }\r\n\r\n  // 12\r\n  public changePassword(req: ChangePwdReq): Observable<any> {\r\n    return this.http.post<any>(`${this.apiUrl}/change-pwd-log`, req);\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}