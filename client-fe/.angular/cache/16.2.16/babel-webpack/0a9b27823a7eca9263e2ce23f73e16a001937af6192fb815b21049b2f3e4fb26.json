{"ast":null,"code":"import { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport Swal from \"sweetalert2\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/service/authentication.service\";\nimport * as i3 from \"src/app/service/customer.service\";\nimport * as i4 from \"src/app/service/notification.service\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"../profile-sidebar/profile-sidebar.component\";\nfunction PasswordComponent_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtext(1, \" Kh\\u00F4ng \\u0111\\u01B0\\u1EE3c b\\u1ECF tr\\u1ED1ng \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PasswordComponent_div_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtext(1, \" Kh\\u00F4ng \\u0111\\u01B0\\u1EE3c b\\u1ECF tr\\u1ED1ng \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PasswordComponent_div_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtext(1, \" M\\u1EADt kh\\u1EA9u ph\\u1EA3i d\\u00E0i \\u00EDt nh\\u1EA5t 8 k\\u00FD t\\u1EF1, ch\\u1EC9 g\\u1ED3m ch\\u1EEF c\\u00E1i kh\\u00F4ng d\\u1EA5u v\\u00E0 ch\\u1EEF s\\u1ED1, ph\\u1EA3i c\\u00F3 \\u00EDt nh\\u1EA5t 1 ch\\u1EEF c\\u00E1i hoa v\\u00E0 1 ch\\u1EEF s\\u1ED1, kh\\u00F4ng k\\u00FD t\\u1EF1 \\u0111\\u1EB7c bi\\u1EC7t \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PasswordComponent_div_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtext(1, \" Kh\\u00F4ng \\u0111\\u01B0\\u1EE3c b\\u1ECF tr\\u1ED1ng \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PasswordComponent_div_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtext(1, \" X\\u00E1c nh\\u1EADn m\\u1EADt kh\\u1EA9u kh\\u00F4ng \\u0111\\u00FAng \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class PasswordComponent {\n  // constructor, ngOn\n  constructor(router, authService, customerService, notifService) {\n    this.router = router;\n    this.authService = authService;\n    this.customerService = customerService;\n    this.notifService = notifService;\n    this.pwdMatch = true;\n    this.pwdInputType = false;\n  }\n  ngOnInit() {\n    this.initForm();\n  }\n  // public functions\n  //\n  togglePwdInputType() {\n    this.pwdInputType = !this.pwdInputType;\n  }\n  //\n  changePassword() {\n    Swal.fire({\n      title: \"Xác nhận đổi mật khẩu?\",\n      cancelButtonText: \"Hủy\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#3085d6\",\n      cancelButtonColor: \"#d33\",\n      confirmButtonText: \"Xác nhận\"\n    }).then(result => {\n      if (result.isConfirmed) {\n        const accId = this.authService.getCustomerFromStorage().account.id;\n        const req = {\n          accId,\n          oldPassword: this.form.get(\"oldPwd\").value.trim(),\n          newPassword: this.form.get(\"newPwd\").value.trim()\n        };\n        this.authService.changePassword(req).subscribe({\n          next: () => {\n            this.notifService.success(\"Đổi mật khẩu thành công. Vui lòng đăng nhập lại!\");\n            this.authService.logout();\n            this.authService.updateIsLoggedInSubj(false);\n            this.router.navigate([\"/log-in\"]);\n          },\n          error: errRes => {\n            this.notifService.error(`Đổi mật khẩu thất bại! ${errRes.error.message})`);\n          }\n        });\n      }\n    });\n  }\n  //\n  trimOldPwd() {\n    this.form.get(\"oldPwd\").setValue(this.form.get(\"oldPwd\").value.trim());\n  }\n  // private functions\n  //\n  initForm() {\n    this.form = new FormGroup({\n      oldPwd: new FormControl(\"\", [Validators.required, this.customNotBlankValidator]),\n      newPwd: new FormControl(\"\", [Validators.required, this.customNotBlankValidator, this.pwdPaternValidator]),\n      confirmNewPwd: new FormControl(\"\", [Validators.required, this.customNotBlankValidator])\n    });\n  }\n  //\n  checkMatch() {\n    const newPwd = this.form.get(\"newPwd\").value;\n    const confirmNewPwd = this.form.get(\"confirmNewPwd\").value;\n    if (newPwd && confirmNewPwd && newPwd !== confirmNewPwd) {\n      this.pwdMatch = false;\n    } else if (newPwd && confirmNewPwd && newPwd === confirmNewPwd) {\n      this.pwdMatch = true;\n    }\n  }\n  //\n  customNotBlankValidator(control) {\n    const value = control.value;\n    if (value.trim() === \"\") {\n      return {\n        customRequired: true\n      };\n    }\n    return null;\n  }\n  //\n  pwdPaternValidator(control) {\n    const pattern = /^[a-zA-Z0-9]{8,}$/;\n    const value = control.value.trim();\n    const array = value.split(\"\");\n    // check has uppercase\n    let hasUpperCase = false;\n    for (let i = 0; i < array.length; i++) {\n      if (array[i] >= \"A\" && array[i] <= \"Z\") {\n        hasUpperCase = true;\n        break;\n      }\n    }\n    // check has number\n    let hasNumber = false;\n    for (let i = 0; i < array.length; i++) {\n      if (!Number.isNaN(parseInt(array[i])) && parseInt(array[i]) >= 0 && parseInt(array[i]) <= 9) {\n        hasNumber = true;\n        break;\n      }\n    }\n    if (value.match(pattern) && hasUpperCase) {\n      return null;\n    }\n    return {\n      pwdPattern: true\n    };\n  }\n  static #_ = this.ɵfac = function PasswordComponent_Factory(t) {\n    return new (t || PasswordComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.AuthenticationService), i0.ɵɵdirectiveInject(i3.CustomerService), i0.ɵɵdirectiveInject(i4.NotificationService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PasswordComponent,\n    selectors: [[\"app-password\"]],\n    decls: 35,\n    vars: 12,\n    consts: [[1, \"container\", \"mb-5\", \"mt-5\"], [1, \"row\"], [1, \"wrapperChucNang\", \"col-md-3\"], [1, \"wrapperTaiKhoan\", \"col-md-8\", \"p-3\"], [1, \"row\", 3, \"formGroup\"], [1, \"col-md-12\"], [1, \"account-page-title\"], [1, \"title\"], [1, \"form-group\", \"active\"], [\"type\", \"password\", \"formControlName\", \"oldPwd\", 1, \"form-control\", 3, \"ngClass\", \"input\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"formControlName\", \"newPwd\", 1, \"form-control\", 3, \"type\", \"ngClass\", \"input\"], [1, \"badge\", \"text-bg-secondary\", \"pointer\", \"mt-2\", 3, \"click\"], [\"type\", \"password\", \"formControlName\", \"confirmNewPwd\", 1, \"form-control\", 3, \"ngClass\", \"input\"], [1, \"form-button\", \"text-center\", \"col-md-12\"], [1, \"btn\", \"btn-danger\", 2, \"width\", \"200px\", 3, \"disabled\", \"click\"], [1, \"invalid-feedback\"]],\n    template: function PasswordComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n        i0.ɵɵelement(3, \"app-profile-sidebar\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 3)(5, \"form\", 4)(6, \"div\", 5)(7, \"div\", 6)(8, \"h1\", 7);\n        i0.ɵɵtext(9, \"\\u0110\\u1ED5i m\\u1EADt kh\\u1EA9u\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(10, \"div\", 5)(11, \"div\", 8)(12, \"label\");\n        i0.ɵɵtext(13, \"M\\u1EADt kh\\u1EA9u c\\u0169:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"input\", 9);\n        i0.ɵɵlistener(\"input\", function PasswordComponent_Template_input_input_14_listener() {\n          return ctx.trimOldPwd();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(15, PasswordComponent_div_15_Template, 2, 0, \"div\", 10);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(16, \"div\", 5)(17, \"div\", 8)(18, \"label\");\n        i0.ɵɵtext(19, \"M\\u1EADt kh\\u1EA9u m\\u1EDBi:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"input\", 11);\n        i0.ɵɵlistener(\"input\", function PasswordComponent_Template_input_input_20_listener() {\n          return ctx.checkMatch();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"span\", 12);\n        i0.ɵɵlistener(\"click\", function PasswordComponent_Template_span_click_21_listener() {\n          return ctx.togglePwdInputType();\n        });\n        i0.ɵɵtext(22);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(23, PasswordComponent_div_23_Template, 2, 0, \"div\", 10);\n        i0.ɵɵtemplate(24, PasswordComponent_div_24_Template, 2, 0, \"div\", 10);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(25, \"div\", 5)(26, \"div\", 8)(27, \"label\");\n        i0.ɵɵtext(28, \"X\\u00E1c nh\\u1EADn m\\u1EADt kh\\u1EA9u:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"input\", 13);\n        i0.ɵɵlistener(\"input\", function PasswordComponent_Template_input_input_29_listener() {\n          return ctx.checkMatch();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(30, PasswordComponent_div_30_Template, 2, 0, \"div\", 10);\n        i0.ɵɵtemplate(31, PasswordComponent_div_31_Template, 2, 0, \"div\", 10);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(32, \"div\", 14)(33, \"button\", 15);\n        i0.ɵɵlistener(\"click\", function PasswordComponent_Template_button_click_33_listener() {\n          return ctx.changePassword();\n        });\n        i0.ɵɵtext(34, \" L\\u01B0u thay \\u0111\\u1ED5i \");\n        i0.ɵɵelementEnd()()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngClass\", ctx.form.get(\"oldPwd\").invalid && ctx.form.get(\"oldPwd\").touched ? \"is-invalid\" : \"\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.form.get(\"oldPwd\").hasError(\"customRequired\"));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"type\", ctx.pwdInputType ? \"text\" : \"password\")(\"ngClass\", ctx.form.get(\"newPwd\").invalid && ctx.form.get(\"newPwd\").touched ? \"is-invalid\" : \"\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.pwdInputType ? \"\\u1EA8n m\\u1EADt kh\\u1EA9u\" : \"Hi\\u1EC3n th\\u1ECB m\\u1EADt kh\\u1EA9u\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.form.get(\"newPwd\").hasError(\"customRequired\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.form.get(\"newPwd\").hasError(\"pwdPattern\") && !ctx.form.get(\"newPwd\").hasError(\"customRequired\"));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngClass\", ctx.form.get(\"confirmNewPwd\").invalid && ctx.form.get(\"confirmNewPwd\").touched || !ctx.pwdMatch ? \"is-invalid\" : \"\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.form.get(\"confirmNewPwd\").hasError(\"customRequired\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.pwdMatch);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", ctx.form.invalid || !ctx.pwdMatch);\n      }\n    },\n    dependencies: [i5.NgClass, i5.NgIf, i6.ɵNgNoValidate, i6.DefaultValueAccessor, i6.NgControlStatus, i6.NgControlStatusGroup, i6.FormGroupDirective, i6.FormControlName, i7.ProfileSidebarComponent],\n    styles: [\".wrapperChucNang[_ngcontent-%COMP%] {\\n  border: 1px solid #b9b9b9;\\n  border-radius: 5px;\\n}\\n\\n.wrapperTaiKhoan[_ngcontent-%COMP%] {\\n  border: 1px solid #b9b9b9;\\n  border-radius: 5px;\\n  margin-left: 10px;\\n}\\n\\n.account-page-title[_ngcontent-%COMP%] {\\n  flex-wrap: wrap;\\n  display: flex;\\n  align-items: center;\\n  margin-bottom: 24px;\\n}\\n\\n.account-page-title[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%] {\\n  font-weight: 700;\\n  font-size: 20px;\\n  line-height: 30px;\\n  margin: 0;\\n  display: block;\\n}\\n\\n.pointer[_ngcontent-%COMP%] {\\n  cursor: pointer;\\n}\\n\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcHJvZmlsZS9wYXNzd29yZC9wYXNzd29yZC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UseUJBQXlCO0VBQ3pCLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLHlCQUF5QjtFQUN6QixrQkFBa0I7RUFDbEIsaUJBQWlCO0FBQ25COztBQUVBO0VBQ0UsZUFBZTtFQUNmLGFBQWE7RUFDYixtQkFBbUI7RUFDbkIsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsZ0JBQWdCO0VBQ2hCLGVBQWU7RUFDZixpQkFBaUI7RUFDakIsU0FBUztFQUNULGNBQWM7QUFDaEI7O0FBRUE7RUFDRSxlQUFlO0FBQ2pCIiwic291cmNlc0NvbnRlbnQiOlsiLndyYXBwZXJDaHVjTmFuZyB7XHJcbiAgYm9yZGVyOiAxcHggc29saWQgI2I5YjliOTtcclxuICBib3JkZXItcmFkaXVzOiA1cHg7XHJcbn1cclxuXHJcbi53cmFwcGVyVGFpS2hvYW4ge1xyXG4gIGJvcmRlcjogMXB4IHNvbGlkICNiOWI5Yjk7XHJcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xyXG59XHJcblxyXG4uYWNjb3VudC1wYWdlLXRpdGxlIHtcclxuICBmbGV4LXdyYXA6IHdyYXA7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIG1hcmdpbi1ib3R0b206IDI0cHg7XHJcbn1cclxuXHJcbi5hY2NvdW50LXBhZ2UtdGl0bGUgLnRpdGxlIHtcclxuICBmb250LXdlaWdodDogNzAwO1xyXG4gIGZvbnQtc2l6ZTogMjBweDtcclxuICBsaW5lLWhlaWdodDogMzBweDtcclxuICBtYXJnaW46IDA7XHJcbiAgZGlzcGxheTogYmxvY2s7XHJcbn1cclxuXHJcbi5wb2ludGVyIHtcclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["FormControl","FormGroup","Validators","Swal","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","PasswordComponent","constructor","router","authService","customerService","notifService","pwdMatch","pwdInputType","ngOnInit","initForm","togglePwdInputType","changePassword","fire","title","cancelButtonText","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","isConfirmed","accId","getCustomerFromStorage","account","id","req","oldPassword","form","get","value","trim","newPassword","subscribe","next","success","logout","updateIsLoggedInSubj","navigate","error","errRes","message","trimOldPwd","setValue","oldPwd","required","customNotBlankValidator","newPwd","pwdPaternValidator","confirmNewPwd","checkMatch","control","customRequired","pattern","array","split","hasUpperCase","i","length","hasNumber","Number","isNaN","parseInt","match","pwdPattern","_","ɵɵdirectiveInject","i1","Router","i2","AuthenticationService","i3","CustomerService","i4","NotificationService","_2","selectors","decls","vars","consts","template","PasswordComponent_Template","rf","ctx","ɵɵelement","ɵɵlistener","PasswordComponent_Template_input_input_14_listener","ɵɵtemplate","PasswordComponent_div_15_Template","PasswordComponent_Template_input_input_20_listener","PasswordComponent_Template_span_click_21_listener","PasswordComponent_div_23_Template","PasswordComponent_div_24_Template","PasswordComponent_Template_input_input_29_listener","PasswordComponent_div_30_Template","PasswordComponent_div_31_Template","PasswordComponent_Template_button_click_33_listener","ɵɵadvance","ɵɵproperty","invalid","touched","hasError","ɵɵtextInterpolate"],"sources":["E:\\Du_An_Tot_Nghiep\\DATN_F5_Store\\client-fe\\src\\app\\profile\\password\\password.component.ts","E:\\Du_An_Tot_Nghiep\\DATN_F5_Store\\client-fe\\src\\app\\profile\\password\\password.component.html"],"sourcesContent":["import { HttpErrorResponse } from \"@angular/common/http\";\r\nimport { Component } from \"@angular/core\";\r\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\r\nimport { Router } from \"@angular/router\";\r\n\r\nimport Swal, { SweetAlertResult } from \"sweetalert2\";\r\n\r\nimport { ChangePwdReq } from \"src/app/model/interface/change-pwd-req.interface\";\r\nimport { AuthenticationService } from \"src/app/service/authentication.service\";\r\nimport { CustomerService } from \"src/app/service/customer.service\";\r\nimport { NotificationService } from \"src/app/service/notification.service\";\r\n\r\n@Component({\r\n  selector: \"app-password\",\r\n  templateUrl: \"./password.component.html\",\r\n  styleUrls: [\"./password.component.css\"],\r\n})\r\nexport class PasswordComponent {\r\n  public form: FormGroup;\r\n  public pwdMatch = true;\r\n  public pwdInputType = false;\r\n\r\n  // constructor, ngOn\r\n  constructor(\r\n    private router: Router,\r\n    private authService: AuthenticationService,\r\n    private customerService: CustomerService,\r\n    private notifService: NotificationService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.initForm();\r\n  }\r\n\r\n  // public functions\r\n  //\r\n  public togglePwdInputType(): void {\r\n    this.pwdInputType = !this.pwdInputType;\r\n  }\r\n\r\n  //\r\n  public changePassword(): void {\r\n    Swal.fire({\r\n      title: \"Xác nhận đổi mật khẩu?\",\r\n      cancelButtonText: \"Hủy\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#3085d6\",\r\n      cancelButtonColor: \"#d33\",\r\n      confirmButtonText: \"Xác nhận\",\r\n    }).then((result: SweetAlertResult) => {\r\n      if (result.isConfirmed) {\r\n        const accId = this.authService.getCustomerFromStorage().account.id;\r\n        const req: ChangePwdReq = {\r\n          accId,\r\n          oldPassword: this.form.get(\"oldPwd\").value.trim(),\r\n          newPassword: this.form.get(\"newPwd\").value.trim(),\r\n        };\r\n        this.authService.changePassword(req).subscribe({\r\n          next: () => {\r\n            this.notifService.success(\r\n              \"Đổi mật khẩu thành công. Vui lòng đăng nhập lại!\"\r\n            );\r\n            this.authService.logout();\r\n            this.authService.updateIsLoggedInSubj(false);\r\n            this.router.navigate([\"/log-in\"]);\r\n          },\r\n          error: (errRes: HttpErrorResponse) => {\r\n            this.notifService.error(\r\n              `Đổi mật khẩu thất bại! ${errRes.error.message})`\r\n            );\r\n          },\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  //\r\n  public trimOldPwd(): void {\r\n    this.form.get(\"oldPwd\").setValue(this.form.get(\"oldPwd\").value.trim());\r\n  }\r\n\r\n  // private functions\r\n  //\r\n  private initForm(): void {\r\n    this.form = new FormGroup({\r\n      oldPwd: new FormControl(\"\", [\r\n        Validators.required,\r\n        this.customNotBlankValidator,\r\n      ]),\r\n      newPwd: new FormControl(\"\", [\r\n        Validators.required,\r\n        this.customNotBlankValidator,\r\n        this.pwdPaternValidator,\r\n      ]),\r\n      confirmNewPwd: new FormControl(\"\", [\r\n        Validators.required,\r\n        this.customNotBlankValidator,\r\n      ]),\r\n    });\r\n  }\r\n\r\n  //\r\n  public checkMatch(): void {\r\n    const newPwd = this.form.get(\"newPwd\").value;\r\n    const confirmNewPwd = this.form.get(\"confirmNewPwd\").value;\r\n\r\n    if (newPwd && confirmNewPwd && newPwd !== confirmNewPwd) {\r\n      this.pwdMatch = false;\r\n    } else if (newPwd && confirmNewPwd && newPwd === confirmNewPwd) {\r\n      this.pwdMatch = true;\r\n    }\r\n  }\r\n\r\n  //\r\n  private customNotBlankValidator(\r\n    control: FormControl\r\n  ): { [key: string]: boolean } | null {\r\n    const value = control.value;\r\n\r\n    if (value.trim() === \"\") {\r\n      return { customRequired: true };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  //\r\n  private pwdPaternValidator(\r\n    control: FormControl\r\n  ): { [key: string]: boolean } | null {\r\n    const pattern = /^[a-zA-Z0-9]{8,}$/;\r\n    const value = control.value.trim();\r\n    const array = value.split(\"\");\r\n\r\n    // check has uppercase\r\n    let hasUpperCase = false;\r\n    for (let i = 0; i < array.length; i++) {\r\n      if (array[i] >= \"A\" && array[i] <= \"Z\") {\r\n        hasUpperCase = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // check has number\r\n    let hasNumber = false;\r\n    for (let i = 0; i < array.length; i++) {\r\n      if (\r\n        !Number.isNaN(parseInt(array[i])) &&\r\n        parseInt(array[i]) >= 0 &&\r\n        parseInt(array[i]) <= 9\r\n      ) {\r\n        hasNumber = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (value.match(pattern) && hasUpperCase) {\r\n      return null;\r\n    }\r\n    return { pwdPattern: true };\r\n  }\r\n}\r\n","<div class=\"container mb-5 mt-5\">\r\n  <div class=\"row\">\r\n    <div class=\"wrapperChucNang col-md-3\">\r\n      <app-profile-sidebar></app-profile-sidebar>\r\n    </div>\r\n\r\n    <div class=\"wrapperTaiKhoan col-md-8 p-3\">\r\n      <form class=\"row\" [formGroup]=\"form\">\r\n        <div class=\"col-md-12\">\r\n          <div class=\"account-page-title\">\r\n            <h1 class=\"title\">Đổi mật khẩu</h1>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Mật khẩu cũ -->\r\n        <div class=\"col-md-12\">\r\n          <div class=\"form-group active\">\r\n            <label>Mật khẩu cũ:</label>\r\n            <input\r\n              type=\"password\"\r\n              class=\"form-control\"\r\n              formControlName=\"oldPwd\"\r\n              [ngClass]=\"\r\n                form.get('oldPwd').invalid && form.get('oldPwd').touched\r\n                  ? 'is-invalid'\r\n                  : ''\r\n              \"\r\n              (input)=\"trimOldPwd()\"\r\n            />\r\n            <div\r\n              class=\"invalid-feedback\"\r\n              *ngIf=\"form.get('oldPwd').hasError('customRequired')\"\r\n            >\r\n              Không được bỏ trống\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Mật khẩu mới -->\r\n        <div class=\"col-md-12\">\r\n          <div class=\"form-group active\">\r\n            <label>Mật khẩu mới:</label>\r\n            <input\r\n              [type]=\"pwdInputType ? 'text' : 'password'\"\r\n              class=\"form-control\"\r\n              formControlName=\"newPwd\"\r\n              [ngClass]=\"\r\n                form.get('newPwd').invalid && form.get('newPwd').touched\r\n                  ? 'is-invalid'\r\n                  : ''\r\n              \"\r\n              (input)=\"checkMatch()\"\r\n            />\r\n            <span\r\n              class=\"badge text-bg-secondary pointer mt-2\"\r\n              (click)=\"togglePwdInputType()\"\r\n              >{{ pwdInputType ? \"Ẩn mật khẩu\" : \"Hiển thị mật khẩu\" }}</span\r\n            >\r\n            <div\r\n              class=\"invalid-feedback\"\r\n              *ngIf=\"form.get('newPwd').hasError('customRequired')\"\r\n            >\r\n              Không được bỏ trống\r\n            </div>\r\n            <div\r\n              class=\"invalid-feedback\"\r\n              *ngIf=\"\r\n                form.get('newPwd').hasError('pwdPattern') &&\r\n                !form.get('newPwd').hasError('customRequired')\r\n              \"\r\n            >\r\n              Mật khẩu phải dài ít nhất 8 ký tự, chỉ gồm chữ cái không dấu và\r\n              chữ số, phải có ít nhất 1 chữ cái hoa và 1 chữ số, không ký tự đặc\r\n              biệt\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Xác nhận mật khẩu -->\r\n        <div class=\"col-md-12\">\r\n          <div class=\"form-group active\">\r\n            <label>Xác nhận mật khẩu:</label>\r\n            <input\r\n              type=\"password\"\r\n              class=\"form-control\"\r\n              formControlName=\"confirmNewPwd\"\r\n              [ngClass]=\"\r\n                (form.get('confirmNewPwd').invalid &&\r\n                  form.get('confirmNewPwd').touched) ||\r\n                !pwdMatch\r\n                  ? 'is-invalid'\r\n                  : ''\r\n              \"\r\n              (input)=\"checkMatch()\"\r\n            />\r\n            <div\r\n              class=\"invalid-feedback\"\r\n              *ngIf=\"form.get('confirmNewPwd').hasError('customRequired')\"\r\n            >\r\n              Không được bỏ trống\r\n            </div>\r\n            <div class=\"invalid-feedback\" *ngIf=\"!pwdMatch\">\r\n              Xác nhận mật khẩu không đúng\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"form-button text-center col-md-12\">\r\n          <button\r\n            class=\"btn btn-danger\"\r\n            style=\"width: 200px\"\r\n            (click)=\"changePassword()\"\r\n            [disabled]=\"form.invalid || !pwdMatch\"\r\n          >\r\n            Lưu thay đổi\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}